{"version":3,"sources":["game.js","App.jsx","serviceWorker.js","index.js"],"names":["dataSet","Game","width","height","_this","this","Object","classCallCheck","lineStorer","tried","trained","trainState","AIControl","result","index","getClosestLine","network","run","cpntrollerType","controller","type","lineType","fail","alive","tap","brain","NeuralNetwork","APP","app","PIXI","backgroundColor","document","getElementById","appendChild","view","startPIXI","Square","stage","addChild","graphics","console","clear","loopIndex","setInterval","line","Line","push","position","y","depose","Math","abs","input","output","restart","log","random","createClass","key","value","map","val","length","train","clearInterval","_this2","target","deposed","splice","floor","beginFill","drawRect","endFill","destroy","_this3","rotation","PI","pivot","set","interactive","on","App","possibleConstructorReturn","getPrototypeOf","call","setState","start","game","state","training","stopGame","suspend","restartTraning","react_default","a","createElement","Button_default","style","margin","variant","color","onClick","id","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.629c67fa.chunk.js","sourcesContent":["import * as PIXI from 'pixi.js';\nimport brain from 'brain.js';\n\nlet dataSet = [];\n\nexport class Game {\n    APP;\n    width;\n    height;\n    lineStorer = [];\n    controller;\n    network;\n    tried = 1;\n    loopIndex;\n    trained = false;\n    trainState = 'Now, AI plays randomly to collect data.';\n\n    constructor(width, height) {\n\n        this.network = new brain.NeuralNetwork();\n        this.width = width;\n        this.height = height;\n        this.APP = startPIXI(width, height);\n        this.controller = new Square();\n        this.APP.stage.addChild(this.controller.graphics);\n        console.clear();\n\n        this.loopIndex = setInterval(() => {\n            let line = new Line(this.width);\n            this.lineStorer.push(line);\n            this.APP.stage.addChild(line.graphics);\n\n            line.loopIndex = setInterval(() => {\n                line.graphics.position.y += 5;\n                if (line.graphics.position.y >= 600) {\n                    line.depose(line.loopIndex);\n                } else if (Math.abs((this.controller.graphics.y - 99 - line.graphics.y)) < 5) {\n                    if (this.controller.type !== line.type) {\n                        dataSet.push({\n                            input: {\n                                cpntrollerType: this.controller.type,\n                                lineType: line.type\n                            },\n                            output: {\n                                fail: 1,\n                                alive: 0\n                            }\n                        });\n                        line.depose(line.loopIndex);\n                        this.restart();\n                    } else {\n                        console.log('success case');\n                        dataSet.push({\n                            input: {\n                                cpntrollerType: this.controller.type,\n                                lineType: line.type\n                            },\n                            output: {\n                                alive: 1,\n                                fail: 0\n                            }\n                        });\n                    }\n                }\n            }, 50);\n        }, 1500);\n\n        setInterval(() => {\n            if (this.trained) {\n                this.AIControl();\n            } else {\n                if (Math.random() > 0.9) {\n                    this.controller.tap();\n                }\n            }\n        }, 100);\n\n    }\n\n    AIControl = () => {\n        let result = 0;\n        let index = this.getClosestLine();\n        if (index !== -1) {\n            result = this.network.run({\n                cpntrollerType: this.controller.type,\n                lineType: this.lineStorer[index].type\n            });\n            if (result.fail > result.alive) {\n                this.controller.tap();\n            }\n        }\n    }\n\n\n    restart() {\n        this.tried++;\n        console.clear();\n        this.controller.restart();\n        this.lineStorer.map(val => {\n            val.depose();\n            return 0;\n        });\n        this.lineStorer = [];\n        if (dataSet.length > 2) {\n            this.network.train(dataSet);\n            this.trained = true;\n            this.trainState = 'Now AI makes decision through neural network.';\n        }\n    }\n    suspend() {\n        clearInterval(this.loopIndex);\n    }\n\n    getClosestLine() {\n        let target = -1;\n        this.lineStorer.map((val, index) => {\n            if (val.deposed) {\n                this.lineStorer.splice(index, 1);\n            } else if (val.graphics.y < (this.controller.graphics.y - 99)) {\n                if (target === -1) {\n                    target = index;\n                } else if (this.lineStorer[target].graphics.y < val.graphics.y) {\n                    target = index;\n                }\n            }\n            return 0;\n        });\n        return target;\n    }\n\n    restartTraning() {\n        dataSet = [];\n        this.tried = 0;\n        this.trained = false;\n        this.trainState = 'Now, AI plays randomly to collect data.';\n        this.restart();\n    }\n}\n\nclass Line {\n    width;\n    height;\n    loopIndex;\n    graphics;\n    type;\n    id;\n    deposed = false;\n\n    constructor(width) {\n        this.type = Math.floor(Math.random() * 4);\n        this.graphics = new PIXI.Graphics();\n        if (this.type === 0) {\n            this.graphics.beginFill(0xFF0000, 1);\n        } else if (this.type === 1) {\n            this.graphics.beginFill(0x0000FF, 1);\n        } else if (this.type === 2) {\n            this.graphics.beginFill(0xFFFFFF, 1);\n        } else {\n            this.graphics.beginFill(0x00FF00, 1);\n        }\n        this.graphics.drawRect(0, 0, width, 10);\n        this.graphics.endFill();\n    }\n\n    depose(clear) {\n        if (!this.deposed) {\n            clearInterval(this.loopIndex);\n            clearInterval(clear);\n            this.graphics.destroy();\n            this.deposed = !this.deposed;\n        }\n    }\n\n}\n\nclass Square {\n    graphics;\n    type = 0;\n\n    constructor() {\n        this.graphics = new PIXI.Graphics();\n        this.graphics.beginFill(0xFF0000, 1);\n        this.graphics.drawRect(0, 0, 70, 70);\n        this.graphics.endFill();\n        this.graphics.beginFill(0x00FF00, 1);\n        this.graphics.drawRect(70, 0, 70, 70);\n        this.graphics.endFill();\n        this.graphics.beginFill(0x0000FF, 1);\n        this.graphics.drawRect(0, 70, 70, 70);\n        this.graphics.endFill();\n        this.graphics.beginFill(0xFFFFFF, 1);\n        this.graphics.drawRect(70, 70, 70, 70);\n        this.graphics.endFill();\n        this.graphics.pivot.set(70, 70);\n        this.graphics.rotation = Math.PI / 4;\n        this.graphics.position.set(250, 400);\n        this.graphics.interactive = true;\n\n        this.graphics.on('click', () => {\n            this.type = (this.type + 1) % 4;\n            this.graphics.rotation = (this.graphics.rotation + Math.PI / 2) % (2 * Math.PI);\n        });\n    }\n\n    tap = () => {\n        this.type = (this.type + 1) % 4;\n        this.graphics.rotation = (this.graphics.rotation + Math.PI / 2) % (2 * Math.PI);\n    }\n\n    restart() {\n        this.graphics.rotation = Math.PI / 4;\n        this.type = 0;\n    }\n\n    depose() {\n        this.graphics.destroy();\n    }\n\n}\n\n\nfunction startPIXI(width, height) {\n    let app = new PIXI.Application(width, height, {\n        backgroundColor: 0x000000\n    });\n    document.getElementById('root').appendChild(app.view);\n    return app;\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { Game } from './game';\n\nclass App extends Component {\n\n    game;\n\n    constructor() {\n        super();\n        this.state = { start:false, training:0, trainState:'Now, AI plays randomly to collect data.'};\n    }\n\n    startPIXI = () => {\n        this.setState({start:true});\n        this.game = new Game(500, 600);\n        setInterval(() => {\n            if (this.state.training !== this.game.tried || this.game.trainState !== this.state.trainState) {\n                this.setState({training:this.game.tried, trainState: this.game.trainState});\n            }\n        },17);\n    }\n\n    stopGame = () => {\n        this.game.suspend();\n    }\n\n    restart = () => {\n        this.game.restartTraning();\n    }\n\n    render() {\n        if (!this.state.start) {\n            return (\n                <div id='start' className=\"App\">\n                <Button variant=\"outlined\" color='primary' onClick={this.startPIXI} >\n                        Start AI traning\n                </Button>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    this is {this.state.training} time to train.<br/>\n                    {this.state.trainState}\n                    <Button style={{margin:'10px 10px 10px 10px'}} variant=\"outlined\" color='secondary' onClick={this.restart} >\n                            reStart traning\n                    </Button>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}